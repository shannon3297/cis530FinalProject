# -*- coding: utf-8 -*-
"""trending_sentiment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11fyVYRmf2BSKmOB3Xx6fToXReCn5wyrG

This code tracks sentiment over time of users with top retweeted Tweets from the training dataset. To run this code, click play on every cell from top to bottom, enjoy!

# Vaccine specific tweets
"""

# imports
import pandas as pd
from google.colab import drive
drive.mount('/content/drive')
pd.set_option('max_colwidth', 400)

train_file = input("What's the path to your vaccine train.csv dataset? Ex: /content/drive/MyDrive/CIS530/CIS530 Final Project/Milestone 4/train-dev-test/train_vax_cleaned.csv: ")
dev_file = input("What's the path to your vaccine dev.csv dataset? Ex: /content/drive/MyDrive/CIS530/CIS530 Final Project/Milestone 4/train-dev-test/dev_vax_cleaned.csv: ")
test_file = input("What's the path to your vaccine test.csv dataset? Ex: /content/drive/MyDrive/CIS530/CIS530 Final Project/Milestone 4/train-dev-test/test_vax_cleaned.csv: ")
train_df = pd.read_csv(train_file, low_memory=False, encoding='utf-8-sig')
dev_df = pd.read_csv(dev_file, low_memory=False, encoding='utf-8-sig')
test_df = pd.read_csv(test_file, low_memory=False, encoding='utf-8-sig')

# drop duplicates and retweets
def cleanData(df):
  cleaned = df.drop_duplicates('text', keep='last')
  cleaned = cleaned[~cleaned.text.str.contains("RT @")]
  print(cleaned.columns)
  return cleaned

# get top 20 tweets overall and sentiment distribution/top 20 tweets/top 20 tweet sentiment distribution in each month and year
def getAnalysis(inputted_df):
  top_20_vax_df = inputted_df.nlargest(20, 'retweet_count')
  print("Sentiment distribution of top 20 Tweets from March 2020 to April 2021")
  print(top_20_vax_df['sentiment'].value_counts())
  months = ['Jan', 'Feb', 'Mar', 'Apr', 'May',' Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
  years = [2020, 2021]
  for yr in years:
    for mo in months:
      print("analytics for", mo, yr)
      df = inputted_df[(inputted_df['month'] == mo) & (inputted_df['year'] == yr)]
      print("Sentiment distribution of all tweets in given mo and yr")
      print(df['sentiment'].value_counts())
      top_20_mo_yr = df.nlargest(20, 'retweet_count')
      print("Sentiment distribution of top 20")
      print(top_20_mo_yr['sentiment'].value_counts())
      top = df.nlargest(1, 'retweet_count')
      print("Top tweeted: ", top['text'], "with", top['retweet_count'], "tweets and occured on", top['month'], top['day'], top['year'])

# get analysis of vaccine specific tweets
noretweets_train_df = cleanData(train_df)
getAnalysis(noretweets_train_df)

"""# All coronavirus-related Tweets"""

generic_train_file = input("What's the path to your train.csv dataset? Ex: /content/drive/MyDrive/CIS530/CIS530 Final Project/Milestone 4/train-dev-test/train_cleaned.csv: ")
generic_dev_file = input("What's the path to your dev.csv dataset? Ex: /content/drive/MyDrive/CIS530/CIS530 Final Project/Milestone 4/train-dev-test/dev_cleaned.csv: ")
generic_test_file = input("What's the path to your test.csv dataset? Ex: /content/drive/MyDrive/CIS530/CIS530 Final Project/Milestone 4/train-dev-test/test_cleaned.csv: ")
generic_train_df = pd.read_csv(generic_train_file, low_memory=False, encoding='utf-8-sig')
generic_dev_df = pd.read_csv(generic_dev_file, low_memory=False, encoding='utf-8-sig')
generic_test_df = pd.read_csv(generic_test_file, low_memory=False, encoding='utf-8-sig')

# get analysis of all corona-related tweets
noretweets_generic_train_df = cleanData(generic_dev_df)
noretweets_generic_train_df = noretweets_generic_train_df[~noretweets_generic_train_df.retweet_count.str.contains("retweet_count")]
noretweets_generic_train_df["retweet_count"] = pd.to_numeric(noretweets_generic_train_df['retweet_count'])
getAnalysis(noretweets_generic_train_df)

# important event date: Olympic games postponed on 3/30/2020
olympic_df = noretweets_train_df[(noretweets_train_df['month'] == 'Mar') & (noretweets_train_df['day'] == 30) & (noretweets_train_df['year'] == '2020')]
print("distribution of all sentiments:")
print(olympic_df['sentiment'].value_counts())
top20 = olympic_df.nlargest(20, 'retweet_count')
print("distribution of top 20 sentiments:")
print(olympic_df['sentiment'].value_counts())

trump_covid_df = noretweets_train_df[(noretweets_train_df['month'] == 'Oct') & (noretweets_train_df['day'] == 2) & (noretweets_train_df['year'] == '2020')]